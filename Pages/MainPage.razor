@page "/main"
@using jira2ets.Services
@using jira2ets.Models.Ets

@inject ProtectedLocalStorage ProtectedLocalStore
@inject EtsService EtsService
@inject JiraService JiraService
@inject NavigationManager NavigationManager
@inject State State

<div class="mat-layout-grid mat-layout-grid-align-middle">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
            <p>
                <MatDatePicker Label="From" @bind-Value="From" Format="dd-MM-yy" Outlined="true"/>
            </p>
            <p>
                <MatButton Style="width:100%"
                           Raised="true"
                           Label="Get worklog"
                           OnClick="@(async () => await GetWorkLogAsync())"/>
            </p>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
            <p>
                <MatDatePicker Label="To" @bind-Value="To" Format="dd-MM-yy" Outlined="true"/>
            </p>
            <p>
                <MatButton Style="width:100%"
                           Raised="true"
                           Label="Fill ets"
                           Disabled="@(!EtsItems.Any())"
                           OnClick="@(async () => await PopulateEtsAsync())"/>
            </p>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
            @if (ProjectDictionary.Any())
            {
                <p>
                    <MatSelectItem ValueChanged="@(async (string? s) => await SetDefaultTaskProject(s))"
                                   Value="DefaultProjectTitle"
                                   Items="@ProjectDictionary.Keys.ToList().Select(s => s.title).ToList()"
                                   Disabled="@(!ProjectDictionary.Any())"
                                   Outlined="true"
                                   Label="Default Project"/>
                </p>
                <p>
                    @if (@DefaultProjectTitle is not null)
                    {
                        <MatSelectItem ValueChanged="@(async (string? s) => await SetDefaultTaskType(s))"
                                       Value="DefaultTaskTypeTitle"
                                       Items="@GetTaskTypes(DefaultProjectTitle)"
                                       Outlined="true"
                                       Label="Default Task"/>
                    }
                </p>
            }
        </div>
    </div>
    <MatDivider/>
    <div>
        <table class="table">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Project</th>
                <th scope="col">Task</th>
                <th scope="col">Date</th>
                <th scope="col">Description</th>
                <th scope="col">Time spent: @(EtsItems.Sum(s => s.TimeUnit.minutes) / 60)</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var eItem in EtsItems)
            {
                <tr class="@GetTimeUnitColor(eItem)">
                    <td>
                        <MatCheckbox @bind-Value="@eItem.ShouldBeReported"/>
                    </td>
                    <td>
                        <select class="form-select" @bind="@eItem.TimeUnit.project_title" disabled="@(!eItem.ShouldBeReported)">
                            @foreach (var task in ProjectDictionary.Keys.ToList())
                            {
                                <option value="@task.title">@task.title</option>
                            }
                        </select>
                    </td>
                    <td>
                        <select class="form-select" @bind="@eItem.TimeUnit.task_type_title" disabled="@(!eItem.ShouldBeReported)">
                            @foreach (var task in ProjectDictionary.First(s => s.Key.title == eItem.TimeUnit.project_title).Value)
                            {
                                <option value="@task.title">@task.title</option>
                            }
                        </select>
                    </td>
                    <td>@eItem.TimeUnit.date</td>
                    <td>@eItem.TimeUnit.description</td>
                    <td>@eItem.TimeUnit.time</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private DateTime? From { get; set; } = DayOfWeek(System.DayOfWeek.Monday);
    private DateTime? To { get; set; } = DayOfWeek(System.DayOfWeek.Friday);
    private List<EtsItem> EtsItems { get; } = new();
    private string? DefaultTaskTypeTitle { get; set; }
    private string? DefaultProjectTitle { get; set; }
    private Dictionary<Project, List<Project>> ProjectDictionary { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!State.IsAuthorized)
        {
            NavigationManager.NavigateTo(string.Empty);
        }
        else
        {
            ProjectDictionary.Clear();

            var projects = await EtsService.GetActiveProjects();
            var taskTypes = await EtsService.GetTaskTypes(projects);

            projects.ForEach(project => { ProjectDictionary.Add(project, taskTypes.Find(s => s.project_id == project.id)?.task_types); });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DefaultProjectTitle = (await ProtectedLocalStore.GetAsync<string>("DefaultProject")).Value;
            DefaultTaskTypeTitle = (await ProtectedLocalStore.GetAsync<string>("DefaultTaskType")).Value;
        }
    }

    private async Task PopulateEtsAsync()
    {
        State.IsBusy = true;
        try
        {
            EtsItems.ForEach(item =>
            {
                var valuePair = ProjectDictionary.First(pair => pair.Key.title == item.TimeUnit?.project_title);
                var project = valuePair.Key;
                var assignments = valuePair.Value;
                var taskType = assignments.Find(s => s.title == item.TimeUnit?.task_type_title);

                item.TimeUnit.project_id = project.id;
                item.TimeUnit.task_type_id = taskType?.id;
            });

    // await Parallel.ForEachAsync(EtsItems.Where(s => s.ShouldBeReported).ToList(), async (s, token) =>
    // {
    //     var result = await EtsService.CreateTimeUnit(s.TimeUnit);
    //     s.IsReported = result.IsSuccessStatusCode;
    //     await InvokeAsync(StateHasChanged);
    // });
        }
        catch (Exception e)
        {
            State.DialogText = e.Message;
            State.IsDialogOpened = true;
        }
        finally
        {
            State.IsBusy = false;
        }
    }

    //
    //     private async Task GetWorkLogAsync()
    //     {
    //        
    //        
    //         try
    //         {
    //             await Electron.AutoUpdater.CheckForUpdatesAndNotifyAsync();
    //             Electron.AutoUpdater.OnError += s => information = s;
    //             var currentVersion = await Electron.App.GetVersionAsync();
    //             var updateCheckResult = await Electron.AutoUpdater.CheckForUpdatesAsync();
    //             var availableVersion = updateCheckResult.UpdateInfo.Version;
    //             information = $"Current version: {currentVersion} - available version: {availableVersion}";
    //         }
    //         catch (Exception e)
    //         {
    //             information = e.Message;
    //             
    //
    //         }
    // StateHasChanged();
    //     }

    private async Task GetWorkLogAsync()
    {
        State.IsBusy = true;
        try
        {
            EtsItems.Clear();

            var jiraItems = await JiraService.GetWorklogs(From, To);
            var parentIssues = await JiraService.GetIssuesAsync(jiraItems.Select(s => s.Issue.ParentKey).Distinct());
            var defProject = ProjectDictionary.Keys.FirstOrDefault(p => p.title == DefaultProjectTitle);
            var defTaskType = defProject == null
                ? null
                : ProjectDictionary[defProject].FirstOrDefault(r => r.title == DefaultTaskTypeTitle);

            EtsItems.AddRange(jiraItems.Select(s =>
            {
                var parentIssue = parentIssues[s.Issue.ParentKey];
                var specialComment = s.Comment == $"Working on issue {s.Issue.Key}" ? string.Empty : s.Comment;
                var timeUnit = new TimeUnit
                {
                    project_id = defProject?.id,
                    task_type_id = defTaskType?.id,
                    project_title = defProject?.title,
                    task_type_title = defTaskType?.title,
                    minutes = s.TimeSpentSeconds / 60,
                    overtime = false,
                    description = $"{s.Issue.ParentKey} {parentIssue.fields.summary}\n{s.Issue.Key} {s.Issue.Summary} {specialComment}",
                    date = s.Started,
                    status = "Draft",
                    isEven = true,
                    is_billable = false,
                    is_overtime_payable = false,
                    overtime_multiplier = 0,
                    time = s.TimeSpent,
                    employee_id = EtsService.EmployeeDetails.id,
                    next_time_unit_id = null
                };

                return new EtsItem
                {
                    ShouldBeReported = true,
                    TimeUnit = timeUnit
                };
            }));
        }
        catch (Exception e)
        {
            State.DialogText = e.Message;
            State.IsDialogOpened = true;
        }
        finally
        {
            State.IsBusy = false;
        }
    }

    private static DateTime DayOfWeek(DayOfWeek dayOfWeek)
    {
        var dateTime = DateTime.Now;
        var diff = dateTime.DayOfWeek - dayOfWeek;
        return dateTime.AddDays(-1 * diff).Date;
    }

    private static string GetTimeUnitColor(EtsItem item)
    {
        if (item.ShouldBeReported && item.IsReportFailed)
        {
            return "table-danger";
        }

        if (item.ShouldBeReported && item.IsReported)
        {
            return "table-success";
        }

        return !item.ShouldBeReported ? "table-secondary" : "table";
    }

    private async Task SetDefaultTaskProject(string? title)
    {
        DefaultProjectTitle = title;
        await ProtectedLocalStore.SetAsync("DefaultProject", DefaultProjectTitle);
        StateHasChanged();
    }

    private async Task SetDefaultTaskType(string? title)
    {
        DefaultTaskTypeTitle = title;
        await ProtectedLocalStore.SetAsync("DefaultTaskType", DefaultTaskTypeTitle);
        StateHasChanged();
    }

    private List<string> GetTaskTypes(string? projectTitle)
    {
        return ProjectDictionary.Where(s => s.Key.title == projectTitle)
            .SelectMany(s => s.Value)
            .Select(s => s.title)
            .ToList();
    }
}